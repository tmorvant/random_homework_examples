package hw4;



import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.input.MouseButton;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Line;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.Text;
import javafx.stage.Stage;
import javafx.util.Duration;


public class tictactoe extends Application {
	
	
	private int turn = 0;
	private boolean gameOver = false;
	private boolean draw = false;
	private String winner = "";
	Tile[][] board = new Tile[3][3];
	Label label = new Label("");
	
	private Parent createContent() {
		Pane pane = new Pane();
		pane.setPrefSize(600,  700);
		
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j< 3; j++) {
				Tile tile = new Tile();
				tile.setTranslateX(j * 200);
				tile.setTranslateY(i * 200);
				pane.getChildren().add(tile);
				
				board[i][j] = tile;
			}
		}
		
		label.relocate(10,  650);
		pane.getChildren().add(label);
		
		
		
		return pane;
	}

	@Override
	public void start(Stage primaryStage) throws Exception {
		
		
		primaryStage.setTitle("Tic Tac Toe");
		primaryStage.setScene(new Scene(createContent()));
		primaryStage.show();
	}
	
	private void checkGame() {
		
		if (board[0][0].getValue() == board[1][1].getValue() && board[0][0].getValue() == board[2][2].getValue() && !board[0][0].getValue().isEmpty()) {
			gameOver = true;
			winner = board[0][0].getValue();
			return;
		}
		if (board[0][2].getValue() == board[1][1].getValue() && board[0][2].getValue() == board[2][0].getValue() && !board[0][2].getValue().isEmpty()) {
			gameOver = true;
			winner = board[0][2].getValue();
			return;
		}
		for (int i = 0; i < 3; i++) {
			if (board[i][0].getValue() == board[i][1].getValue() && board[i][0].getValue() == board[i][2].getValue() && !board[i][0].getValue().isEmpty()) {
				gameOver = true;
				winner = board[i][0].getValue();
				return;
			}
			if (board[0][i].getValue() == board[1][i].getValue() && board[0][i].getValue() == board[2][i].getValue() && !board[0][i].getValue().isEmpty()) {
				gameOver = true;
				winner = board[0][i].getValue();
				return;
			}
			for (int j = 0; j < 3; j++) {
				if (board[i][j].getValue().isEmpty()) {
					return;
				}
			}
		}
		gameOver = true;
		draw = true;
	}
	
	private class Tile extends StackPane {
		
		private Text marker = new Text();
		
		public Tile() {
			Rectangle board = new Rectangle(200, 200);
			board.setFill(null);
			board.setStroke(Color.BLACK);
			
			setAlignment(Pos.CENTER);
			marker.setFont(Font.font(100));
			getChildren().addAll(board, marker);
			label.setText("Player X Turn");
			setOnMouseClicked(event -> {
				if (event.getButton() == MouseButton.PRIMARY) {
					
					if (gameOver) {
						return;
					}
					if (turn == 0) {
						if (!this.getValue().isEmpty()) {
							return;
						}
						createX();
						turn = 1;
						label.setText("Player O Turn");
					}
					else {
						if (!this.getValue().isEmpty()) {
							return;
						}
						createO();
						turn = 0;
						label.setText("Player X Turn");
					}
				}
				checkGame();
				if (gameOver) {
					if (!draw) {
						if (winner == "X") {
							label.setText("Congratulations, X win the game!");
						}
						else {
							label.setText("Congratulations, O win the game!");
						}
					}
					else {
						label.setText("Draw!");
					}
				}
			});
		}
		
		private void createX() {
			marker.setText("X");
		}
		
		private void createO() {
			marker.setText("O");
		
		}
		
		public String getValue() {
			return marker.getText();
		}

	}
}
